-----------------------------------net.anwiba.generated.test.bean.Factory.java-----------------------------------

package net.anwiba.generated.test.bean;

import java.lang.reflect.InvocationTargetException;
import java.text.MessageFormat;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import net.anwiba.commons.ensure.Conditions;
import net.anwiba.commons.ensure.Ensure;
import net.anwiba.commons.reflection.OptionalReflectionMethodInvoker;
import net.anwiba.commons.reflection.ReflectionConstructorInvoker;
import net.anwiba.commons.reflection.ReflectionFieldSetter;
import net.anwiba.commons.reflection.ReflectionMethodInvoker;
import net.anwiba.commons.utilities.string.StringUtilities;

public class Factory {

    private final String type = "Factory";
    private final Map<java.lang.String, Object> _unknownMembers = new LinkedHashMap<java.lang.String, Object>();
    private final static HashMap<java.lang.String, Class> _classes = new HashMap<java.lang.String, Class>();

    public String getType() {
        return this.type;
    }

    private void _inject(java.lang.String name, Object value) {
        try {
            OptionalReflectionMethodInvoker<Factory, Object> setterInvoker = OptionalReflectionMethodInvoker.createSetter(this.getClass(), "JsonProperty", "value", name);
            setterInvoker.invoke(this, value);
        } catch (InvocationTargetException exception) {
            throw new RuntimeException(exception);
        }
    }

    @JsonAnySetter
    public void set(final java.lang.String name, final Object value) {
        Ensure.ensureThatArgument(name, Conditions.notNull());
        _inject(name, value);
        this._unknownMembers.put(name, value);
    }

    @JsonAnyGetter
    public Map<java.lang.String, Object> get() {
        if (this._unknownMembers.isEmpty()) {
            return null;
        }
        return this._unknownMembers;
    }

    @JsonCreator
    public static Factory create(
        @JsonProperty("type")
        java.lang.String type) {
        if (StringUtilities.isNullOrTrimmedEmpty(type)) {
            return new Factory();
        }
        Class<? extends Factory> clazz = _createClass(type);
        if (clazz!= null) {
            return _createBean(clazz);
        }
        clazz = _createClass(type.toLowerCase());
        if (clazz!= null) {
            return _createBean(clazz);
        }
        java.lang.String className = MessageFormat.format("{0}{1}", type, "Factory");
        clazz = _createClass(className);
        if (clazz!= null) {
            return _createBean(clazz);
        }
        className = MessageFormat.format("{0}{1}", type.toLowerCase(), "Factory");
        clazz = _createClass(className);
        if (clazz!= null) {
            return _createBean(clazz);
        }
        return new Factory();
    }

    private static Factory _validateBean(Factory bean) {
        try {
            Class clazz = bean.getClass();
            ReflectionMethodInvoker<Factory, Map<java.lang.String, Object>> methodInvoker = new ReflectionMethodInvoker<Factory, Map<java.lang.String, Object>>(clazz, "get");
            Map<java.lang.String, Object> unkownMembers = methodInvoker.invoke(bean);
            ReflectionFieldSetter setterInvoker = new ReflectionFieldSetter(bean);
            if (unkownMembers == null) {
                return bean;
            }
            for (java.lang.String member: unkownMembers.keySet()) {
                try {
                    Object value = unkownMembers.get(member);
                    if (value == null) {
                        continue;
                    }
                    if (clazz.getDeclaredField(member) == null) {
                        continue;
                    }
                    setterInvoker.invoke(member, value);
                } catch (NoSuchFieldException exception) {
                    throw new RuntimeException(exception);
                } catch (SecurityException exception) {
                    throw new RuntimeException(exception);
                }
            }
            return bean;
        } catch (InvocationTargetException exception) {
            throw new RuntimeException(exception);
        }
    }

    private static Factory _createBean(Class<? extends Factory> clazz) {
        try {
            ReflectionConstructorInvoker<Factory> invoker = new ReflectionConstructorInvoker<Factory>(clazz);
            return invoker.invoke();
        } catch (InvocationTargetException exception) {
            throw new RuntimeException(exception);
        }
    }

    private static synchronized Class<? extends Factory> _createClass(java.lang.String type) {
        if (_classes.containsKey(type)) {
            return ((Class<? extends Factory> ) _classes.get(type));
        }
        try {
            java.lang.String packageName = Factory.class.getPackage().getName();
            java.lang.String typeName = StringUtilities.setFirstTrimedCharacterToUpperCase(type);
            java.lang.String className = MessageFormat.format("{0}.{1}", packageName, typeName);
            Class<?> clazz = Class.forName(className);
            if (!Factory.class.isAssignableFrom(clazz)) {
                _classes.put(type, null);
                return null;
            }
            _classes.put(type, clazz);
            return ((Class<? extends Factory> ) clazz);
        } catch (ClassNotFoundException exception) {
            _classes.put(type, null);
            return null;
        }
    }

}
