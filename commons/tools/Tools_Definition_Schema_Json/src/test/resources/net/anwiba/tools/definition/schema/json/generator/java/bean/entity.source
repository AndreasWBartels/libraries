-----------------------------------net.anwiba.generated.test.bean.Entity.java-----------------------------------

package net.anwiba.generated.test.bean;

import java.lang.reflect.InvocationTargetException;
import java.util.LinkedHashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import net.anwiba.commons.ensure.Conditions;
import net.anwiba.commons.ensure.Ensure;
import net.anwiba.commons.reflection.OptionalReflectionMethodInvoker;
import net.anwiba.commons.utilities.provider.INamedValueProvider;

public class Entity
    implements INamedValueProvider<Object, RuntimeException>
{

    private final Map<String, Object> _unknownMembers = new LinkedHashMap<String, Object>();

    private void _inject(String name, Object value) {
        try {
            OptionalReflectionMethodInvoker<Entity, Object> setterInvoker = OptionalReflectionMethodInvoker.createSetter(this.getClass(), "JsonProperty", "value", name);
            setterInvoker.invoke(this, value);
        } catch (InvocationTargetException exception) {
            throw new RuntimeException(exception);
        }
    }

    @JsonAnySetter
    public void set(final String name, final Object value) {
        Ensure.ensureThatArgument(name, Conditions.notNull());
        _inject(name, value);
        this._unknownMembers.put(name, value);
    }

    @JsonAnyGetter
    public Map<String, Object> get() {
        if (this._unknownMembers.isEmpty()) {
            return null;
        }
        return this._unknownMembers;
    }

    @JsonIgnore
    @Override
    public Iterable<String> getNames() {
        return this._unknownMembers.keySet();
    }

    @Override
    public Object getValue(final String name) {
        if (name == null) {
            return null;
        }
        return this._unknownMembers.get(name);
    }

}
