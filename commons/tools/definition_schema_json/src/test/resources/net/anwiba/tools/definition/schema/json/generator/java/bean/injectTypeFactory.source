-----------------------------------net.anwiba.generated.test.bean.Factory.java-----------------------------------

package net.anwiba.generated.test.bean;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.text.MessageFormat;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JacksonInject;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Factory {

    private final String type = "Factory";
    private final static HashMap<java.lang.String, Class> _classes = new HashMap<>();

    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
    public static Factory create(
        @JacksonInject("type")
        java.lang.String type) {
        if (_isNullOrTrimmedEmpty(type)) {
            return new Factory();
        }
        Class<? extends Factory> clazz = _createClass(type);
        if (clazz!= null) {
            return _createBean(clazz);
        }
        clazz = _createClass(type.toLowerCase());
        if (clazz!= null) {
            return _createBean(clazz);
        }
        java.lang.String className = MessageFormat.format("{0}{1}", type, "Factory");
        clazz = _createClass(className);
        if (clazz!= null) {
            return _createBean(clazz);
        }
        className = MessageFormat.format("{0}{1}", type.toLowerCase(), "Factory");
        clazz = _createClass(className);
        if (clazz!= null) {
            return _createBean(clazz);
        }
        return new Factory();
    }

    private static Factory _createBean(final Class<? extends Factory> clazz) {
        if (System.getSecurityManager() == null) {
            try {
                Constructor<? extends Factory> constructor = clazz.getDeclaredConstructor(new Class[ 0 ] );
                return constructor.newInstance();
            } catch (InstantiationException exception) {
                throw new RuntimeException(exception);
            } catch (NoSuchMethodException exception) {
                throw new RuntimeException(exception);
            } catch (InvocationTargetException exception) {
                throw new RuntimeException(exception);
            } catch (IllegalAccessException exception) {
                throw new RuntimeException(exception);
            } catch (IllegalArgumentException exception) {
                throw new RuntimeException(exception);
            }
        }
        return AccessController.doPrivileged(new PrivilegedAction<Factory>() {


            public Factory run() {
                try {
                    Constructor<? extends Factory> constructor = clazz.getDeclaredConstructor(new Class[ 0 ] );
                    return constructor.newInstance();
                } catch (InstantiationException exception) {
                    throw new RuntimeException(exception);
                } catch (NoSuchMethodException exception) {
                    throw new RuntimeException(exception);
                } catch (InvocationTargetException exception) {
                    throw new RuntimeException(exception);
                } catch (IllegalAccessException exception) {
                    throw new RuntimeException(exception);
                } catch (IllegalArgumentException exception) {
                    throw new RuntimeException(exception);
                }
            }

        }
        );
    }

    private static synchronized Class<? extends Factory> _createClass(java.lang.String type) {
        if (_classes.containsKey(type)) {
            return ((Class<? extends Factory> ) _classes.get(type));
        }
        try {
            java.lang.String packageName = Factory.class.getPackage().getName();
            java.lang.String typeName = _setFirstCharacterToUpperCase(type);
            java.lang.String className = MessageFormat.format("{0}.{1}", packageName, typeName);
            Class<?> clazz = Class.forName(className);
            if (!Factory.class.isAssignableFrom(clazz)) {
                _classes.put(type, null);
                return null;
            }
            _classes.put(type, clazz);
            return ((Class<? extends Factory> ) clazz);
        } catch (ClassNotFoundException exception) {
            _classes.put(type, null);
            return null;
        }
    }

    private static boolean _isNullOrTrimmedEmpty(java.lang.String value) {
        return ((value == null)||value.trim().isEmpty());
    }

    private static java.lang.String _setFirstCharacterToUpperCase(java.lang.String value) {
        if ((value == null)||value.trim().isEmpty()) {
            return null;
        }
        return (value.substring(0, 1).toUpperCase()+ value.substring(1, value.length()));
    }

    @JsonProperty("type")
    public String getType() {
        return this.type;
    }

}
